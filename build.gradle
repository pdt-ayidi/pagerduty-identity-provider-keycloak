/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

// Based on:
// https://github.com/rwinch/gradle-publish-ossrh-sample

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

gradle.rootProject.ext.libName = 'pagerduty-identity-provider'
version = '0.1.1'
group = 'com.arthuryidi.provider'
archivesBaseName = libName
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    compileOnly 'org.keycloak:keycloak-core:18.0.0'
    compileOnly 'org.keycloak:keycloak-server-spi:18.0.0'
    compileOnly 'org.keycloak:keycloak-server-spi-private:18.0.0'
    compileOnly 'org.keycloak:keycloak-services:18.0.0'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.keycloak:keycloak-services:18.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

jar {
    manifest {
        attributes(
            'Implementation-Title': group,
            'Implementation-Version': archiveVersion
        )
    }
}

signing {
    required { project.gradle.taskGraph.hasTask("publish") }

    def signingKeyId = project.findProperty("signing.keyId")
    def signingKey = new File(project.findProperty("signing.secretKeyRingFile")).getText("UTF-8")
    def signingPassword = project.findProperty("signing.password")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.maven
}

project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${group}:${libName}"
            description = libName
            url = "https://github.com/pdt-ayidi/pagerduty-identity-provider-keycloak"
            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0"
                }
            }

            developers {
                developer {
                    id = "pdt-ayidi"
                    name = "Arthur Yidi"
                    email = "ayidi@pagerduty.com"
                }
            }

            scm {
                connection = 'scm:git:git@github.com:pdt-ayidi/pagerduty-identity-provider-keycloak.git'
                developerConnection = 'scm:git:git@github.com:pdt-ayidi/pagerduty-identity-provider-keycloak.git'
                url = 'https://github.com/pdt-ayidi/pagerduty-identity-provider-keycloak'
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

test {
    useJUnitPlatform()
}