/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.arthuryidi.provider;

import com.fasterxml.jackson.databind.JsonNode;
import org.jboss.logging.Logger;
import org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider;
import org.keycloak.broker.oidc.OAuth2IdentityProviderConfig;
import org.keycloak.broker.oidc.mappers.AbstractJsonUserAttributeMapper;
import org.keycloak.broker.provider.BrokeredIdentityContext;
import org.keycloak.broker.provider.IdentityBrokerException;
import org.keycloak.broker.provider.util.SimpleHttp;
import org.keycloak.broker.social.SocialIdentityProvider;
import org.keycloak.models.KeycloakSession;

public class PagerDutyIdentityProvider extends AbstractOAuth2IdentityProvider implements SocialIdentityProvider {

    public static final String PROFILE_URL = "https://api.pagerduty.com/users/me";

    private static final Logger logger = Logger.getLogger(PagerDutyIdentityProvider.class);

    public PagerDutyIdentityProvider(KeycloakSession session, OAuth2IdentityProviderConfig config) {
        super(session, config);

        config.setAuthorizationUrl("https://identity.pagerduty.com/global/oauth/authorize");
        config.setTokenUrl("https://identity.pagerduty.com/global/oauth/token");
        config.setUserInfoUrl(PROFILE_URL);
    }

    @Override
    protected String getDefaultScopes() {
        return "openid name email";
    }

    @Override
    protected BrokeredIdentityContext doGetFederatedIdentity(String accessToken) {
        try {
            JsonNode profile = SimpleHttp.doGet(PROFILE_URL, session)
                    .header("Accept", "application/vnd.pagerduty+json;version=2")
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + accessToken)
                    .asJson();

            if (!profile.hasNonNull("user")) {
                throw new IdentityBrokerException("Invalid response from PagerDuty API.");
            }
            
            profile = profile.get("user");

            String userID = profile.get("id").textValue();
            String[] userGivenName = profile.get("name").textValue().split("\\s", 2);
            String userEmail = profile.get("email").textValue();

            BrokeredIdentityContext user = new BrokeredIdentityContext(userID);

            user.setUsername(userID);
            user.setEmail(userEmail);
            user.setFirstName(userGivenName[0]);
            user.setLastName(userGivenName[1]);

            user.setIdpConfig(getConfig());
            user.setIdp(this);

            AbstractJsonUserAttributeMapper.storeUserProfileForMapper(user, profile, getConfig().getAlias());
            return user;
        } catch (Exception e) {
            throw new IdentityBrokerException("Could not obtain user profile from PagerDuty.", e);
        }
    }
}
